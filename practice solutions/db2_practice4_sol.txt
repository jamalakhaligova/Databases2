Bitmap index
------------

Compress the following bit vector with run-length encoding (see in Text Book)
0000000000000000000000010000000101

run lengths: 23, 7, 1 -> In binary format: 10111, 111, 1
compressed -> 1111010111 110111 01
                   -----    ---  -
                     23      7   1

Decompress the following run-length encoded bit vector:
1111010101001011
     ----- -  --
       21  0   3
decompressed -> 000000000000000000000110001


Oracle indexes
--------------
1.
Give the tables (table_name) which has a column indexed in descending order.
(In the solutions only objects of Nikovits are concerned.)

SELECT * FROM dba_ind_columns WHERE descend='DESC' AND index_owner='NIKOVITS';

See the name of the column. Why is it so strange? -> DBA_IND_EXPRESSIONS.COLUMN_NAME

SELECT * FROM dba_ind_columns WHERE index_name='EMP2' AND index_owner='NIKOVITS';
SELECT * FROM dba_ind_expressions WHERE index_name='EMP2' AND index_owner='NIKOVITS';

------------------------------------
2.
Give the indexes (index name) which are composite and have at least 9 columns (expressions).

SELECT index_owner, index_name FROM dba_ind_columns 
GROUP BY index_owner, index_name HAVING count(*) >=9;

-- confirm one of them
SELECT * FROM dba_ind_columns WHERE index_owner='SYS' AND index_name='I_OBJ2';

------------------------------------------
3.
Give the name of bitmap indexes on table NIKOVITS.CUSTOMERS.

SELECT * FROM dba_indexes 
WHERE table_owner='NIKOVITS' AND table_name='CUSTOMERS' AND index_type='BITMAP';

------------------------------------------
4.
Give the indexes of owner NIKOVITS which has at least 2 columns and are function-based.

SELECT index_owner, index_name FROM dba_ind_columns 
GROUP BY index_owner, index_name HAVING count(*) >=2
 INTERSECT
SELECT index_owner, index_name FROM dba_ind_expressions WHERE index_owner='NIKOVITS';

-----------------------------------------
5.
Give for one of the above indexes the expression for which the index was created.

SELECT * FROM dba_ind_expressions WHERE index_owner='NIKOVITS';

---------------------------------------------------------------------------------------
6.
Write a PL/SQL procedure which prints out the names and sizes (in bytes) of indexes created
on the parameter table.
CREATE OR REPLACE PROCEDURE list_indexes(p_owner VARCHAR2, p_table VARCHAR2) IS
...
Test:
-----
set serveroutput on
execute list_indexes('nikovits', 'emp');

CREATE OR REPLACE PROCEDURE list_indexes(p_owner VARCHAR2, p_table VARCHAR2) IS
 v_size NUMBER(20);
BEGIN
 FOR rec IN 
  (SELECT index_name FROM dba_indexes 
   WHERE upper(table_owner)=upper(p_owner) AND upper(table_name)=upper(p_table) order by 1)
 LOOP
  SELECT SUM(bytes) into v_size FROM dba_segments 
  WHERE segment_name=rec.index_name AND segment_type LIKE 'INDEX%'
  AND owner=upper(p_owner);
  dbms_output.put_line(rec.index_name||': ' ||to_char(v_size)); 
 END LOOP;
END;
/
---------------------------------------------------------------------------------------
7.
Write a PL/SQL procedure which gets a file_id and block_id as a parameter and prints out the database
object to which this datablock is allocated. (owner, object_name, object_type).
If the specified datablock is not allocated to any objects, the procedure should print out 'Free block'.
CREATE OR REPLACE PROCEDURE block_usage(p_fileid NUMBER, p_blockid NUMBER) IS
...
Test:
-----
set serveroutput on
execute block_usage(2, 615);

set serveroutput on
CREATE OR REPLACE PROCEDURE block_usage(p_fileid NUMBER, p_blockid NUMBER) IS
 outp VARCHAR2(200);
BEGIN
  SELECT MIN(owner)||'  '||NVL(MIN(segment_name), 'Free')||'  '||MIN(segment_type)
  INTO outp 
  FROM dba_extents 
  WHERE file_id=p_fileid AND p_blockid BETWEEN block_id AND block_id + blocks-1;  
  dbms_output.put_line(outp);
END;
/