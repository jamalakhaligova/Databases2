Dear Students!

You can find the solutions of the first test below.
If you missed only 1 point, I gave to you the better grade. (50 points -> 5)
You can see your points and grade selecting the following database table:

   SELECT * FROM nikovits.test1_results;

Typical mistakes for which I reduced your points were the following:
In Exercise 4 you had to compute the numerical value, the formula was not enough.
In SQL and PL/SQL exercises you had to copy the output too into your submitted file. 
In Exercise 6 and 7 you had to write PL/SQL and not SQL statements.

--------------------------------------------------------------------------------------------
Databases II. Midterm test, 2020.10.20. 16.15
Name:
Neptun code:

Solutions should be written into this file and sent to the following email address:
nikovits@inf.elte.hu

Minimal requirement from "paper" exercises: 8 points
Minimal requirement from computer exercises: 8 points
Grade levels will be the following: 
   24 points (2), 33 points (3), 42 points (4), 51 points (5)

"Paper" exercises
========================================================================
1. (6 points)
Insert the following keys (in the given order) into the B+ tree below: 52, 19, 90 
Let's suppose that a node (block) can contain 3 keys and 4 pointers.
Redraw the tree after each split.

                           72
                43|56                79
  15|39|40   43|45|49   56|70    72|75   79|80|83 
------------------------------------------------------------------------
Solution:
                           72
                43|49|56                79
  15|39|40   43|45  49|52   56|70    72|75   79|80|83 

                           49|72
          39|43              56               79
  15|19  39|40   43|45  49|52   56|70    72|75   79|80|83 

                           49|72
          39|43              56                  79|83
  15|19  39|40   43|45  49|52   56|70    72|75   79|80  83|90 
========================================================================
2. (6 points)
a) Compress the following bit vector with run-length encoding:
   10000000000000001100000000001

b) Decompress the following run-length encoded bit vector:
   111011011010110101
------------------------------------------------------------------------
Solution:
a) compressed -> 00 11101111 00 11101010
                  -     ----  -     ----  
                  0      15   0      10   

b)  111011011010110101
        ----  --   ---
         13    2    5
decompressed -> 00000000000001001000001
========================================================================
3. (8 points)
There is a Linear hash table below. We can put two records into a block,
n = 4 (current number of buckets); i = 2 (number of bits used);
r/n = 2.9 (predefined threshold, where r is the actual number of records)

0100          0010  
----          ----
1100   0101   1010   1011
0000   1101   1110   0011 
----   ----   ----   ----
 00     01     10     11

Insert the following values into the hash table: 0111, 1000, 1111, 0110
Redraw the diagram when you create a new bucket.
------------------------------------------------------------------------
Solution:
0100          0010   0111 
----          ----   ----
1100   0101   1010   1011
0000   1101   1110   0011 
----   ----   ----   ----
 00     01     10     11

              0110   1111
              0010   0111
              ----   ----
1000   0101   1010   1011   0100
0000   1101   1110   0011   1100
----   ----   ----   ----   ----
 000    001    010    011    100
========================================================================
4. (10 points)
Let's consider a relation R with the following parameters:
T(R)=1600000, block size = 8192 bytes, L(R)=256 bytes, V(R,A)=500, and let W the result
of the following query: W <-- SELECT c1,c2 FROM R WHERE A='x';
a) Compute B(W) if L(W)=64 bytes.
b) What is the cost (in block I/O) of a sort operation on R, if the memory size is 101 blocks?
------------------------------------------------------------------------
Solution:
a) T(W)=T(R)/V(R,A) = 3200, bf(W)=8192/64 = 128, B(W)=T(W)/bf(W)   =     25
b) B(R)=T(R)/bf(R)  = 50000, B(R)+2*B(R)*Log(500) ~ 5*B(R)         = 250000 (consider the ceiling of Log)
========================================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
========================================================================
Computer exercises in SQL and PL/SQL. 
You should send your queries and programs as well as the output!!!
You can work either in Aramis or Ullman database.
------------------------------------------------------------------------
5. (10 points)
Give the name and size of the Hash clusters whose owner is ’NIKOVITS’ (Cluster_name, Size)
------------------------------------------------------------------------
Solution: (Ullman)
CIKK_HCL	589824
CIKK_HCL2	327680
CIKK_HCL3	327680
========================================================================
6. (10 points)
Write a PL/SQL function which returns in a character string the list of table names 
(comma separated list in alphabetical order) of owner NIKOVITS, where the table has a NUMBER data type column,
and the table has datablocks in two different datafiles.

CREATE OR REPLACE FUNCTION nt_tabs RETURN VARCHAR2 IS
...
SELECT nt_tabs() from dual;

You can check your program with the following:
set serveroutput on
EXECUTE check_plsql('nt_tabs()');
------------------------------------------------------------------------
Solution: (Ullman)
CUSTOMERS,TABLA_123
========================================================================
7. (10 points)
Write a PL/SQL procedure which prints out the average blocking factor
[(number of rows)/(number of non-empty blocks)] of table NIKOVITS.CUSTOMERS.

CREATE OR REPLACE PROCEDURE bl_factor IS
...
set serveroutput on
EXECUTE bl_factor();

You can check your program with the following:
EXECUTE check_plsql('bl_factor()');
------------------------------------------------------------------------
Solution: (Ullman)
38.2
========================================================================